/**
 * @fileoverview added by tsickle
 * Generated from: lib/lazy-elements/lazy-element-dynamic/lazy-element-dynamic.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, ComponentFactoryResolver, Directive, Inject, Input, Renderer2, TemplateRef, ViewContainerRef, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { LazyElementsLoaderService, } from '../lazy-elements-loader.service';
/** @type {?} */
const LOG_PREFIX = '@angular-extensions/elements';
/**
 * \@dynamic
 */
export class LazyElementDynamicDirective {
    /**
     * @param {?} document
     * @param {?} renderer
     * @param {?} vcr
     * @param {?} cfr
     * @param {?} cdr
     * @param {?} template
     * @param {?} elementsLoaderService
     */
    constructor(document, renderer, vcr, cfr, cdr, template, elementsLoaderService) {
        this.document = document;
        this.renderer = renderer;
        this.vcr = vcr;
        this.cfr = cfr;
        this.cdr = cdr;
        this.template = template;
        this.elementsLoaderService = elementsLoaderService;
        // tslint:disable-line:no-input-rename
        this.viewRef = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.tag || this.tag.length === 0 || !this.tag.includes('-')) {
            throw new Error(`${LOG_PREFIX} - Valid tag has to be specified when using *axLazyElementDynamic directive (use *axLazyElementDynamic="'some-tag'"), got: "${this.tag}"`);
        }
        /** @type {?} */
        const elementConfig = this.elementsLoaderService.getElementConfig(this.tag) ||
            ((/** @type {?} */ ({})));
        /** @type {?} */
        const options = this.elementsLoaderService.options;
        /** @type {?} */
        const loadingComponent = elementConfig.loadingComponent || options.loadingComponent;
        if (this.loadingTemplateRef) {
            this.vcr.createEmbeddedView(this.loadingTemplateRef);
        }
        else if (loadingComponent) {
            /** @type {?} */
            const factory = this.cfr.resolveComponentFactory(loadingComponent);
            this.vcr.createComponent(factory);
        }
        this.elementsLoaderService
            .loadElement(this.url, this.tag, this.isModule, this.importMap, elementConfig === null || elementConfig === void 0 ? void 0 : elementConfig.hooks)
            .then((/**
         * @return {?}
         */
        () => customElements.whenDefined(this.tag)))
            .then((/**
         * @return {?}
         */
        () => {
            this.vcr.clear();
            /** @type {?} */
            const originalCreateElement = this.renderer.createElement;
            this.renderer.createElement = (/**
             * @param {?} name
             * @param {?} namespace
             * @return {?}
             */
            (name, namespace) => {
                if (name === 'ax-lazy-element') {
                    name = this.tag;
                }
                return this.document.createElement(name);
            });
            this.viewRef = this.vcr.createEmbeddedView(this.template);
            this.renderer.createElement = originalCreateElement;
            this.cdr.markForCheck();
        }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            /** @type {?} */
            const errorComponent = elementConfig.errorComponent || options.errorComponent;
            this.vcr.clear();
            if (this.errorTemplateRef) {
                this.vcr.createEmbeddedView(this.errorTemplateRef);
                this.cdr.markForCheck();
            }
            else if (errorComponent) {
                /** @type {?} */
                const factory = this.cfr.resolveComponentFactory(errorComponent);
                this.vcr.createComponent(factory);
                this.cdr.markForCheck();
            }
            else {
                console.error(`${LOG_PREFIX} - Loading of element <${this.tag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElementDynamic="errorTemplate: error" to display customized error message in place of element\n\n`, error);
            }
        }));
    }
    /**
     * @return {?}
     */
    destroyEmbeddedView() {
        if (this.viewRef && !this.viewRef.destroyed) {
            this.viewRef.detach();
            this.viewRef.destroy();
            this.viewRef = null;
        }
    }
}
LazyElementDynamicDirective.decorators = [
    { type: Directive, args: [{
                selector: '[axLazyElementDynamic]',
            },] }
];
/** @nocollapse */
LazyElementDynamicDirective.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef },
    { type: TemplateRef },
    { type: LazyElementsLoaderService }
];
LazyElementDynamicDirective.propDecorators = {
    tag: [{ type: Input, args: ['axLazyElementDynamic',] }],
    url: [{ type: Input, args: ['axLazyElementDynamicUrl',] }],
    loadingTemplateRef: [{ type: Input, args: ['axLazyElementDynamicLoadingTemplate',] }],
    errorTemplateRef: [{ type: Input, args: ['axLazyElementDynamicErrorTemplate',] }],
    isModule: [{ type: Input, args: ['axLazyElementDynamicModule',] }],
    importMap: [{ type: Input, args: ['axLazyElementDynamicImportMap',] }]
};
if (false) {
    /** @type {?} */
    LazyElementDynamicDirective.prototype.tag;
    /** @type {?} */
    LazyElementDynamicDirective.prototype.url;
    /** @type {?} */
    LazyElementDynamicDirective.prototype.loadingTemplateRef;
    /** @type {?} */
    LazyElementDynamicDirective.prototype.errorTemplateRef;
    /** @type {?} */
    LazyElementDynamicDirective.prototype.isModule;
    /** @type {?} */
    LazyElementDynamicDirective.prototype.importMap;
    /**
     * @type {?}
     * @private
     */
    LazyElementDynamicDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    LazyElementDynamicDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    LazyElementDynamicDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    LazyElementDynamicDirective.prototype.vcr;
    /**
     * @type {?}
     * @private
     */
    LazyElementDynamicDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LazyElementDynamicDirective.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    LazyElementDynamicDirective.prototype.template;
    /**
     * @type {?}
     * @private
     */
    LazyElementDynamicDirective.prototype.elementsLoaderService;
}
//# sourceMappingURL=data:application/json;base64,