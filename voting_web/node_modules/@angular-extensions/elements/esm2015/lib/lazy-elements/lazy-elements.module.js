/**
 * @fileoverview added by tsickle
 * Generated from: lib/lazy-elements/lazy-elements.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, NgModule, Optional, SkipSelf, } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LazyElementDirective } from './lazy-element/lazy-element.directive';
import { LazyElementDynamicDirective } from './lazy-element-dynamic/lazy-element-dynamic.directive';
import { LazyElementsLoaderService, } from './lazy-elements-loader.service';
import { LAZY_ELEMENT_CONFIGS, LAZY_ELEMENT_ROOT_GUARD, LAZY_ELEMENT_ROOT_OPTIONS, } from './lazy-elements.tokens';
/**
 * @param {?} rootOptions
 * @return {?}
 */
export function createLazyElementRootGuard(rootOptions) {
    if (rootOptions) {
        throw new TypeError(`LazyElementsModule.forRoot() called twice. Feature modules should use LazyElementsModule.forFeature() instead.`);
    }
    return 'LazyElementsModule.forRoot() multiple execution guard';
}
export class LazyElementsModule {
    /**
     * @param {?} lazyElementsLoaderService
     * @param {?} elementConfigsMultiProvider
     * @param {?} guard
     */
    constructor(lazyElementsLoaderService, elementConfigsMultiProvider, guard) {
        if (elementConfigsMultiProvider && elementConfigsMultiProvider.length) {
            elementConfigsMultiProvider
                .filter((/**
             * @param {?} configs
             * @return {?}
             */
            (configs) => configs.some((/**
             * @param {?} config
             * @return {?}
             */
            (config) => !config.isAdded))))
                .forEach((/**
             * @param {?} configs
             * @return {?}
             */
            (configs) => lazyElementsLoaderService.addConfigs(configs)));
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: LazyElementsModule,
            providers: [
                {
                    provide: LAZY_ELEMENT_CONFIGS,
                    useValue: options && options.elementConfigs ? options.elementConfigs : [],
                    multi: true,
                },
                {
                    provide: LAZY_ELEMENT_ROOT_OPTIONS,
                    useValue: options.rootOptions ? options.rootOptions : {},
                },
                {
                    provide: LAZY_ELEMENT_ROOT_GUARD,
                    useFactory: createLazyElementRootGuard,
                    deps: [[LAZY_ELEMENT_ROOT_OPTIONS, new Optional(), new SkipSelf()]],
                },
            ],
        };
    }
    /**
     * @param {?} options
     * @return {?}
     */
    static forFeature(options) {
        return {
            ngModule: LazyElementsModule,
            providers: [
                {
                    provide: LAZY_ELEMENT_CONFIGS,
                    useValue: options && options.elementConfigs ? options.elementConfigs : [],
                    multi: true,
                },
            ],
        };
    }
}
LazyElementsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [LazyElementDirective, LazyElementDynamicDirective],
                imports: [CommonModule],
                exports: [LazyElementDirective, LazyElementDynamicDirective],
                providers: [],
            },] }
];
/** @nocollapse */
LazyElementsModule.ctorParameters = () => [
    { type: LazyElementsLoaderService },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_ELEMENT_CONFIGS,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_ELEMENT_ROOT_GUARD,] }] }
];
/**
 * @record
 */
export function LazyElementModuleOptions() { }
if (false) {
    /** @type {?|undefined} */
    LazyElementModuleOptions.prototype.elementConfigs;
}
/**
 * @record
 */
export function LazyElementModuleRootOptions() { }
if (false) {
    /** @type {?|undefined} */
    LazyElementModuleRootOptions.prototype.elementConfigs;
    /** @type {?|undefined} */
    LazyElementModuleRootOptions.prototype.rootOptions;
}
/**
 * @record
 */
export function LazyElementRootOptions() { }
if (false) {
    /** @type {?|undefined} */
    LazyElementRootOptions.prototype.loadingComponent;
    /** @type {?|undefined} */
    LazyElementRootOptions.prototype.errorComponent;
    /** @type {?|undefined} */
    LazyElementRootOptions.prototype.isModule;
    /** @type {?|undefined} */
    LazyElementRootOptions.prototype.importMap;
    /** @type {?|undefined} */
    LazyElementRootOptions.prototype.preload;
    /** @type {?|undefined} */
    LazyElementRootOptions.prototype.hooks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1lbGVtZW50cy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL2FuZ3VsYXItZXh0ZW5zaW9ucy9lbGVtZW50cy9wcm9qZWN0cy9lbGVtZW50cy9zcmMvIiwic291cmNlcyI6WyJsaWIvbGF6eS1lbGVtZW50cy9sYXp5LWVsZW1lbnRzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxNQUFNLEVBRU4sUUFBUSxFQUNSLFFBQVEsRUFDUixRQUFRLEdBRVQsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ3BHLE9BQU8sRUFHTCx5QkFBeUIsR0FDMUIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4QyxPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLHVCQUF1QixFQUN2Qix5QkFBeUIsR0FDMUIsTUFBTSx3QkFBd0IsQ0FBQzs7Ozs7QUFFaEMsTUFBTSxVQUFVLDBCQUEwQixDQUN4QyxXQUFtQztJQUVuQyxJQUFJLFdBQVcsRUFBRTtRQUNmLE1BQU0sSUFBSSxTQUFTLENBQ2pCLGdIQUFnSCxDQUNqSCxDQUFDO0tBQ0g7SUFDRCxPQUFPLHVEQUF1RCxDQUFDO0FBQ2pFLENBQUM7QUFRRCxNQUFNLE9BQU8sa0JBQWtCOzs7Ozs7SUEwQzdCLFlBQ0UseUJBQW9ELEVBR3BELDJCQUE4QyxFQUc5QyxLQUFVO1FBRVYsSUFBSSwyQkFBMkIsSUFBSSwyQkFBMkIsQ0FBQyxNQUFNLEVBQUU7WUFDckUsMkJBQTJCO2lCQUN4QixNQUFNOzs7O1lBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJOzs7O1lBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBQyxFQUFDO2lCQUM5RCxPQUFPOzs7O1lBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDO1NBQ3hFO0lBQ0gsQ0FBQzs7Ozs7SUF2REQsTUFBTSxDQUFDLE9BQU8sQ0FDWixPQUFxQztRQUVyQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLG9CQUFvQjtvQkFDN0IsUUFBUSxFQUNOLE9BQU8sSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNqRSxLQUFLLEVBQUUsSUFBSTtpQkFDWjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUseUJBQXlCO29CQUNsQyxRQUFRLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTtpQkFDekQ7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLHVCQUF1QjtvQkFDaEMsVUFBVSxFQUFFLDBCQUEwQjtvQkFDdEMsSUFBSSxFQUFFLENBQUMsQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksUUFBUSxFQUFFLENBQUMsQ0FBQztpQkFDcEU7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQ2YsT0FBaUM7UUFFakMsT0FBTztZQUNMLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxvQkFBb0I7b0JBQzdCLFFBQVEsRUFDTixPQUFPLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDakUsS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUE5Q0YsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLG9CQUFvQixFQUFFLDJCQUEyQixDQUFDO2dCQUNqRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7Z0JBQ3ZCLE9BQU8sRUFBRSxDQUFDLG9CQUFvQixFQUFFLDJCQUEyQixDQUFDO2dCQUM1RCxTQUFTLEVBQUUsRUFBRTthQUNkOzs7O1lBeEJDLHlCQUF5Qjt3Q0FxRXRCLFFBQVEsWUFDUixNQUFNLFNBQUMsb0JBQW9COzRDQUUzQixRQUFRLFlBQ1IsTUFBTSxTQUFDLHVCQUF1Qjs7Ozs7QUFXbkMsOENBRUM7OztJQURDLGtEQUFpQzs7Ozs7QUFHbkMsa0RBR0M7OztJQUZDLHNEQUFpQzs7SUFDakMsbURBQXFDOzs7OztBQUd2Qyw0Q0FPQzs7O0lBTkMsa0RBQTZCOztJQUM3QixnREFBMkI7O0lBQzNCLDBDQUFtQjs7SUFDbkIsMkNBQW9COztJQUNwQix5Q0FBa0I7O0lBQ2xCLHVDQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluamVjdCxcbiAgTW9kdWxlV2l0aFByb3ZpZGVycyxcbiAgTmdNb2R1bGUsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgVHlwZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBMYXp5RWxlbWVudERpcmVjdGl2ZSB9IGZyb20gJy4vbGF6eS1lbGVtZW50L2xhenktZWxlbWVudC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTGF6eUVsZW1lbnREeW5hbWljRGlyZWN0aXZlIH0gZnJvbSAnLi9sYXp5LWVsZW1lbnQtZHluYW1pYy9sYXp5LWVsZW1lbnQtZHluYW1pYy5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgRWxlbWVudENvbmZpZyxcbiAgSG9va3NDb25maWcsXG4gIExhenlFbGVtZW50c0xvYWRlclNlcnZpY2UsXG59IGZyb20gJy4vbGF6eS1lbGVtZW50cy1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQge1xuICBMQVpZX0VMRU1FTlRfQ09ORklHUyxcbiAgTEFaWV9FTEVNRU5UX1JPT1RfR1VBUkQsXG4gIExBWllfRUxFTUVOVF9ST09UX09QVElPTlMsXG59IGZyb20gJy4vbGF6eS1lbGVtZW50cy50b2tlbnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGF6eUVsZW1lbnRSb290R3VhcmQoXG4gIHJvb3RPcHRpb25zOiBMYXp5RWxlbWVudFJvb3RPcHRpb25zXG4pIHtcbiAgaWYgKHJvb3RPcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBMYXp5RWxlbWVudHNNb2R1bGUuZm9yUm9vdCgpIGNhbGxlZCB0d2ljZS4gRmVhdHVyZSBtb2R1bGVzIHNob3VsZCB1c2UgTGF6eUVsZW1lbnRzTW9kdWxlLmZvckZlYXR1cmUoKSBpbnN0ZWFkLmBcbiAgICApO1xuICB9XG4gIHJldHVybiAnTGF6eUVsZW1lbnRzTW9kdWxlLmZvclJvb3QoKSBtdWx0aXBsZSBleGVjdXRpb24gZ3VhcmQnO1xufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtMYXp5RWxlbWVudERpcmVjdGl2ZSwgTGF6eUVsZW1lbnREeW5hbWljRGlyZWN0aXZlXSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGV4cG9ydHM6IFtMYXp5RWxlbWVudERpcmVjdGl2ZSwgTGF6eUVsZW1lbnREeW5hbWljRGlyZWN0aXZlXSxcbiAgcHJvdmlkZXJzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgTGF6eUVsZW1lbnRzTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoXG4gICAgb3B0aW9uczogTGF6eUVsZW1lbnRNb2R1bGVSb290T3B0aW9uc1xuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPExhenlFbGVtZW50c01vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTGF6eUVsZW1lbnRzTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBMQVpZX0VMRU1FTlRfQ09ORklHUyxcbiAgICAgICAgICB1c2VWYWx1ZTpcbiAgICAgICAgICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5lbGVtZW50Q29uZmlncyA/IG9wdGlvbnMuZWxlbWVudENvbmZpZ3MgOiBbXSxcbiAgICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IExBWllfRUxFTUVOVF9ST09UX09QVElPTlMsXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnMucm9vdE9wdGlvbnMgPyBvcHRpb25zLnJvb3RPcHRpb25zIDoge30sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBMQVpZX0VMRU1FTlRfUk9PVF9HVUFSRCxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBjcmVhdGVMYXp5RWxlbWVudFJvb3RHdWFyZCxcbiAgICAgICAgICBkZXBzOiBbW0xBWllfRUxFTUVOVF9ST09UX09QVElPTlMsIG5ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKV1dLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGZvckZlYXR1cmUoXG4gICAgb3B0aW9uczogTGF6eUVsZW1lbnRNb2R1bGVPcHRpb25zXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TGF6eUVsZW1lbnRzTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBMYXp5RWxlbWVudHNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IExBWllfRUxFTUVOVF9DT05GSUdTLFxuICAgICAgICAgIHVzZVZhbHVlOlxuICAgICAgICAgICAgb3B0aW9ucyAmJiBvcHRpb25zLmVsZW1lbnRDb25maWdzID8gb3B0aW9ucy5lbGVtZW50Q29uZmlncyA6IFtdLFxuICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbGF6eUVsZW1lbnRzTG9hZGVyU2VydmljZTogTGF6eUVsZW1lbnRzTG9hZGVyU2VydmljZSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoTEFaWV9FTEVNRU5UX0NPTkZJR1MpXG4gICAgZWxlbWVudENvbmZpZ3NNdWx0aVByb3ZpZGVyOiBFbGVtZW50Q29uZmlnW11bXSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoTEFaWV9FTEVNRU5UX1JPT1RfR1VBUkQpXG4gICAgZ3VhcmQ6IGFueVxuICApIHtcbiAgICBpZiAoZWxlbWVudENvbmZpZ3NNdWx0aVByb3ZpZGVyICYmIGVsZW1lbnRDb25maWdzTXVsdGlQcm92aWRlci5sZW5ndGgpIHtcbiAgICAgIGVsZW1lbnRDb25maWdzTXVsdGlQcm92aWRlclxuICAgICAgICAuZmlsdGVyKChjb25maWdzKSA9PiBjb25maWdzLnNvbWUoKGNvbmZpZykgPT4gIWNvbmZpZy5pc0FkZGVkKSlcbiAgICAgICAgLmZvckVhY2goKGNvbmZpZ3MpID0+IGxhenlFbGVtZW50c0xvYWRlclNlcnZpY2UuYWRkQ29uZmlncyhjb25maWdzKSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGF6eUVsZW1lbnRNb2R1bGVPcHRpb25zIHtcbiAgZWxlbWVudENvbmZpZ3M/OiBFbGVtZW50Q29uZmlnW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGF6eUVsZW1lbnRNb2R1bGVSb290T3B0aW9ucyB7XG4gIGVsZW1lbnRDb25maWdzPzogRWxlbWVudENvbmZpZ1tdO1xuICByb290T3B0aW9ucz86IExhenlFbGVtZW50Um9vdE9wdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGF6eUVsZW1lbnRSb290T3B0aW9ucyB7XG4gIGxvYWRpbmdDb21wb25lbnQ/OiBUeXBlPGFueT47XG4gIGVycm9yQ29tcG9uZW50PzogVHlwZTxhbnk+O1xuICBpc01vZHVsZT86IGJvb2xlYW47XG4gIGltcG9ydE1hcD86IGJvb2xlYW47XG4gIHByZWxvYWQ/OiBib29sZWFuO1xuICBob29rcz86IEhvb2tzQ29uZmlnO1xufVxuIl19