/**
 * @fileoverview added by tsickle
 * Generated from: lib/lazy-elements/lazy-element/lazy-element.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, ComponentFactoryResolver, Directive, Input, TemplateRef, ViewContainerRef, } from '@angular/core';
import { LazyElementsLoaderService, } from '../lazy-elements-loader.service';
/** @type {?} */
const LOG_PREFIX = '@angular-extensions/elements';
export class LazyElementDirective {
    /**
     * @param {?} vcr
     * @param {?} template
     * @param {?} elementsLoaderService
     * @param {?} cfr
     * @param {?} cdr
     */
    constructor(vcr, template, elementsLoaderService, cfr, cdr) {
        this.vcr = vcr;
        this.template = template;
        this.elementsLoaderService = elementsLoaderService;
        this.cfr = cfr;
        this.cdr = cdr;
        // tslint:disable-line:no-input-rename
        this.viewRef = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const tpl = (/** @type {?} */ (this.template));
        /** @type {?} */
        const elementTag = tpl._declarationTContainer
            ? tpl._declarationTContainer.tagName
            : tpl._def.element.template.nodes[0].element.name;
        /** @type {?} */
        const elementConfig = this.elementsLoaderService.getElementConfig(elementTag) ||
            ((/** @type {?} */ ({})));
        /** @type {?} */
        const options = this.elementsLoaderService.options;
        /** @type {?} */
        const loadingComponent = elementConfig.loadingComponent || options.loadingComponent;
        if (this.loadingTemplateRef) {
            this.vcr.createEmbeddedView(this.loadingTemplateRef);
        }
        else if (loadingComponent) {
            /** @type {?} */
            const factory = this.cfr.resolveComponentFactory(loadingComponent);
            this.vcr.createComponent(factory);
        }
        this.elementsLoaderService
            .loadElement(this.url, elementTag, this.isModule, this.importMap, elementConfig === null || elementConfig === void 0 ? void 0 : elementConfig.hooks)
            .then((/**
         * @return {?}
         */
        () => customElements.whenDefined(elementTag)))
            .then((/**
         * @return {?}
         */
        () => {
            this.vcr.clear();
            this.viewRef = this.vcr.createEmbeddedView(this.template);
            this.cdr.markForCheck();
        }))
            .catch((/**
         * @return {?}
         */
        () => {
            this.vcr.clear();
            /** @type {?} */
            const errorComponent = elementConfig.errorComponent || options.errorComponent;
            if (this.errorTemplateRef) {
                this.vcr.createEmbeddedView(this.errorTemplateRef);
                this.cdr.markForCheck();
            }
            else if (errorComponent) {
                /** @type {?} */
                const factory = this.cfr.resolveComponentFactory(errorComponent);
                this.vcr.createComponent(factory);
                this.cdr.markForCheck();
            }
            else {
                console.error(`${LOG_PREFIX} - Loading of element <${elementTag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement="errorTemplate: error" to display customized error message in place of element`);
            }
        }));
    }
    /**
     * @return {?}
     */
    destroyEmbeddedView() {
        if (this.viewRef && !this.viewRef.destroyed) {
            this.viewRef.detach();
            this.viewRef.destroy();
            this.viewRef = null;
        }
    }
}
LazyElementDirective.decorators = [
    { type: Directive, args: [{
                selector: '[axLazyElement]',
            },] }
];
/** @nocollapse */
LazyElementDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: LazyElementsLoaderService },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef }
];
LazyElementDirective.propDecorators = {
    url: [{ type: Input, args: ['axLazyElement',] }],
    loadingTemplateRef: [{ type: Input, args: ['axLazyElementLoadingTemplate',] }],
    errorTemplateRef: [{ type: Input, args: ['axLazyElementErrorTemplate',] }],
    isModule: [{ type: Input, args: ['axLazyElementModule',] }],
    importMap: [{ type: Input, args: ['axLazyElementImportMap',] }]
};
if (false) {
    /** @type {?} */
    LazyElementDirective.prototype.url;
    /** @type {?} */
    LazyElementDirective.prototype.loadingTemplateRef;
    /** @type {?} */
    LazyElementDirective.prototype.errorTemplateRef;
    /** @type {?} */
    LazyElementDirective.prototype.isModule;
    /** @type {?} */
    LazyElementDirective.prototype.importMap;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.vcr;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.template;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.elementsLoaderService;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,