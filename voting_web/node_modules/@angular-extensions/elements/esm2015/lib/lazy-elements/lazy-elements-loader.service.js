/**
 * @fileoverview added by tsickle
 * Generated from: lib/lazy-elements/lazy-elements-loader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __awaiter } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { LAZY_ELEMENT_ROOT_OPTIONS, LAZY_ELEMENTS_REGISTRY, } from './lazy-elements.tokens';
import * as i0 from "@angular/core";
import * as i1 from "./lazy-elements.tokens";
/** @type {?} */
const LOG_PREFIX = '@angular-extensions/elements';
/**
 * @record
 */
export function HooksConfig() { }
if (false) {
    /** @type {?|undefined} */
    HooksConfig.prototype.beforeLoad;
    /** @type {?|undefined} */
    HooksConfig.prototype.afterLoad;
}
/**
 * @record
 */
export function ElementConfig() { }
if (false) {
    /** @type {?} */
    ElementConfig.prototype.tag;
    /** @type {?} */
    ElementConfig.prototype.url;
    /** @type {?|undefined} */
    ElementConfig.prototype.isModule;
    /** @type {?|undefined} */
    ElementConfig.prototype.importMap;
    /** @type {?|undefined} */
    ElementConfig.prototype.loadingComponent;
    /** @type {?|undefined} */
    ElementConfig.prototype.errorComponent;
    /** @type {?|undefined} */
    ElementConfig.prototype.preload;
    /** @type {?|undefined} */
    ElementConfig.prototype.hooks;
    /** @type {?|undefined} */
    ElementConfig.prototype.isAdded;
}
export class LazyElementsLoaderService {
    /**
     * @param {?} registry
     * @param {?} options
     */
    constructor(registry, options) {
        this.registry = registry;
        this.options = options;
        this.configs = [];
        if (!options) {
            this.options = {};
        }
    }
    /**
     * @param {?} newConfigs
     * @return {?}
     */
    addConfigs(newConfigs) {
        newConfigs.forEach((/**
         * @param {?} newConfig
         * @return {?}
         */
        (newConfig) => {
            /** @type {?} */
            const existingConfig = this.getElementConfig(newConfig.tag);
            if (existingConfig) {
                console.warn(`${LOG_PREFIX} - ElementConfig for tag '${newConfig.tag}' was previously added, it will not be added multiple times, continue...`);
            }
            else {
                newConfig.isAdded = true;
                this.configs.push(newConfig);
                /** @type {?} */
                const shouldPreload = newConfig.preload !== undefined
                    ? newConfig.preload
                    : this.options.preload;
                if (shouldPreload) {
                    this.loadElement(newConfig.url, newConfig.tag, newConfig.isModule, newConfig.importMap, newConfig.hooks);
                }
            }
        }));
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    getElementConfig(tag) {
        return this.configs.find((/**
         * @param {?} config
         * @return {?}
         */
        (config) => config.tag === tag));
    }
    /**
     * @param {?=} tags
     * @return {?}
     */
    preload(tags) {
        /** @type {?} */
        let configs = this.configs;
        if (tags) {
            configs = this.configs.filter((/**
             * @param {?} config
             * @return {?}
             */
            (config) => tags.includes(config.tag)));
        }
        configs.forEach((/**
         * @param {?} config
         * @return {?}
         */
        (config) => this.loadElement(config.url, config.tag, config.isModule, config.importMap, config.hooks)));
    }
    /**
     * @param {?} url
     * @param {?} tag
     * @param {?=} isModule
     * @param {?=} importMap
     * @param {?=} hooksConfig
     * @return {?}
     */
    loadElement(url, tag, isModule, importMap, hooksConfig) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const config = this.getElementConfig(tag);
            isModule !== null && isModule !== void 0 ? isModule : (isModule = (_a = config === null || config === void 0 ? void 0 : config.isModule) !== null && _a !== void 0 ? _a : this.options.isModule);
            importMap !== null && importMap !== void 0 ? importMap : (importMap = (_b = config === null || config === void 0 ? void 0 : config.importMap) !== null && _b !== void 0 ? _b : this.options.importMap);
            if (!tag) {
                throw new Error(`${LOG_PREFIX} - tag for '${url}' not found, the *axLazyElement has to be used on HTML element`);
            }
            if (!url) {
                if (!(config === null || config === void 0 ? void 0 : config.url) && !importMap) {
                    throw new Error(`${LOG_PREFIX} - url for <${tag}> not found`);
                }
                else if (importMap) {
                    url = tag;
                }
                else {
                    url = config.url;
                }
            }
            if (!this.hasElement(url)) {
                /** @type {?} */
                const notifier = this.addElement(url);
                /** @type {?} */
                const beforeLoadHook = (_e = (_c = hooksConfig === null || hooksConfig === void 0 ? void 0 : hooksConfig.beforeLoad) !== null && _c !== void 0 ? _c : (_d = config === null || config === void 0 ? void 0 : config.hooks) === null || _d === void 0 ? void 0 : _d.beforeLoad) !== null && _e !== void 0 ? _e : (_g = (_f = this.options) === null || _f === void 0 ? void 0 : _f.hooks) === null || _g === void 0 ? void 0 : _g.beforeLoad;
                /** @type {?} */
                const afterLoadHook = (_k = (_h = hooksConfig === null || hooksConfig === void 0 ? void 0 : hooksConfig.afterLoad) !== null && _h !== void 0 ? _h : (_j = config === null || config === void 0 ? void 0 : config.hooks) === null || _j === void 0 ? void 0 : _j.afterLoad) !== null && _k !== void 0 ? _k : (_m = (_l = this.options) === null || _l === void 0 ? void 0 : _l.hooks) === null || _m === void 0 ? void 0 : _m.afterLoad;
                if (importMap) {
                    url = yield this.resolveImportMap(url);
                }
                /** @type {?} */
                const script = (/** @type {?} */ (document.createElement('script')));
                if (isModule) {
                    script.type = 'module';
                }
                script.src = url;
                script.onload = (/**
                 * @return {?}
                 */
                () => {
                    if (afterLoadHook) {
                        this.handleHook(afterLoadHook, tag)
                            .then(notifier.resolve)
                            .catch(notifier.reject);
                    }
                    else {
                        notifier.resolve();
                    }
                });
                script.onerror = notifier.reject;
                if (beforeLoadHook) {
                    this.handleHook(beforeLoadHook, tag)
                        .then((/**
                     * @return {?}
                     */
                    () => document.body.appendChild(script)))
                        .catch(notifier.reject);
                }
                else {
                    document.body.appendChild(script);
                }
            }
            return this.registry.get(this.stripUrlProtocol(url));
        });
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    addElement(url) {
        /** @type {?} */
        let notifier;
        this.registry.set(this.stripUrlProtocol(url), new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => (notifier = { resolve, reject }))));
        return notifier;
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    hasElement(url) {
        return this.registry.has(this.stripUrlProtocol(url));
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    stripUrlProtocol(url) {
        return url.replace(/https?:\/\//, '');
    }
    /**
     * @private
     * @param {?} hook
     * @param {?} tag
     * @return {?}
     */
    handleHook(hook, tag) {
        try {
            return Promise.resolve(hook(tag));
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    resolveImportMap(url) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const System = ((/** @type {?} */ (window))).System;
            if (System) {
                yield System.prepareImport();
                url = System.resolve(url);
            }
            else {
                throw new Error(`${LOG_PREFIX} - importMap feature depends on SystemJS library to be globally loaded but none was found, thus '${url}' can't be resolved. You should either load SystemJS or remove the importMap flag.`);
            }
            return url;
        });
    }
}
LazyElementsLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
LazyElementsLoaderService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [LAZY_ELEMENTS_REGISTRY,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_ELEMENT_ROOT_OPTIONS,] }] }
];
/** @nocollapse */ LazyElementsLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LazyElementsLoaderService_Factory() { return new LazyElementsLoaderService(i0.ɵɵinject(i1.LAZY_ELEMENTS_REGISTRY), i0.ɵɵinject(i1.LAZY_ELEMENT_ROOT_OPTIONS, 8)); }, token: LazyElementsLoaderService, providedIn: "root" });
if (false) {
    /** @type {?} */
    LazyElementsLoaderService.prototype.configs;
    /**
     * @type {?}
     * @private
     */
    LazyElementsLoaderService.prototype.registry;
    /** @type {?} */
    LazyElementsLoaderService.prototype.options;
}
/**
 * @record
 */
function Notifier() { }
if (false) {
    /** @type {?} */
    Notifier.prototype.resolve;
    /** @type {?} */
    Notifier.prototype.reject;
}
//# sourceMappingURL=data:application/json;base64,