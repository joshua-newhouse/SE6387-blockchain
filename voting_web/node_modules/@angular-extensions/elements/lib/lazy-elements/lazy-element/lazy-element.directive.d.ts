import { ChangeDetectorRef, ComponentFactoryResolver, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import { LazyElementsLoaderService } from '../lazy-elements-loader.service';
import * as ɵngcc0 from '@angular/core';
export declare class LazyElementDirective implements OnInit {
    private vcr;
    private template;
    private elementsLoaderService;
    private cfr;
    private cdr;
    url: string;
    loadingTemplateRef: TemplateRef<any>;
    errorTemplateRef: TemplateRef<any>;
    isModule: boolean | undefined;
    importMap: boolean | undefined;
    private viewRef;
    constructor(vcr: ViewContainerRef, template: TemplateRef<any>, elementsLoaderService: LazyElementsLoaderService, cfr: ComponentFactoryResolver, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    destroyEmbeddedView(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LazyElementDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LazyElementDirective, "[axLazyElement]", never, { "url": "axLazyElement"; "loadingTemplateRef": "axLazyElementLoadingTemplate"; "errorTemplateRef": "axLazyElementErrorTemplate"; "isModule": "axLazyElementModule"; "importMap": "axLazyElementImportMap"; }, {}, never>;
}

//# sourceMappingURL=lazy-element.directive.d.ts.map