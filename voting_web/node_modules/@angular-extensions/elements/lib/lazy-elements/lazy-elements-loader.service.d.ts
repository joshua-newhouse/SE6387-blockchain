import { Type } from '@angular/core';
import { LazyElementRootOptions } from './lazy-elements.module';
import { LazyElementsRegistry } from './lazy-elements.tokens';
import * as ɵngcc0 from '@angular/core';
export declare type Hook = (tag: string) => Promise<void> | void;
export interface HooksConfig {
    beforeLoad?: Hook;
    afterLoad?: Hook;
}
export interface ElementConfig {
    tag: string;
    url: string;
    isModule?: boolean;
    importMap?: boolean;
    loadingComponent?: Type<any>;
    errorComponent?: Type<any>;
    preload?: boolean;
    hooks?: HooksConfig;
    isAdded?: boolean;
}
export declare class LazyElementsLoaderService {
    private registry;
    options: LazyElementRootOptions;
    configs: ElementConfig[];
    constructor(registry: LazyElementsRegistry, options: LazyElementRootOptions);
    addConfigs(newConfigs: ElementConfig[]): void;
    getElementConfig(tag: string): ElementConfig;
    preload(tags?: string[]): void;
    loadElement(url: string, tag: string, isModule?: boolean, importMap?: boolean, hooksConfig?: HooksConfig): Promise<void>;
    private addElement;
    private hasElement;
    private stripUrlProtocol;
    private handleHook;
    private resolveImportMap;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LazyElementsLoaderService, [null, { optional: true; }]>;
}

//# sourceMappingURL=lazy-elements-loader.service.d.ts.map