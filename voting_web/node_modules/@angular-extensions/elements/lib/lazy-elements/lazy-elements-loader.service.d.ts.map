{"version":3,"file":"lazy-elements-loader.service.d.ts","sources":["lazy-elements-loader.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Type } from '@angular/core';\nimport { LazyElementRootOptions } from './lazy-elements.module';\nimport { LazyElementsRegistry } from './lazy-elements.tokens';\nexport declare type Hook = (tag: string) => Promise<void> | void;\nexport interface HooksConfig {\n    beforeLoad?: Hook;\n    afterLoad?: Hook;\n}\nexport interface ElementConfig {\n    tag: string;\n    url: string;\n    isModule?: boolean;\n    importMap?: boolean;\n    loadingComponent?: Type<any>;\n    errorComponent?: Type<any>;\n    preload?: boolean;\n    hooks?: HooksConfig;\n    isAdded?: boolean;\n}\nexport declare class LazyElementsLoaderService {\n    private registry;\n    options: LazyElementRootOptions;\n    configs: ElementConfig[];\n    constructor(registry: LazyElementsRegistry, options: LazyElementRootOptions);\n    addConfigs(newConfigs: ElementConfig[]): void;\n    getElementConfig(tag: string): ElementConfig;\n    preload(tags?: string[]): void;\n    loadElement(url: string, tag: string, isModule?: boolean, importMap?: boolean, hooksConfig?: HooksConfig): Promise<void>;\n    private addElement;\n    private hasElement;\n    private stripUrlProtocol;\n    private handleHook;\n    private resolveImportMap;\n}\n"]}